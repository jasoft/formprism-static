<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>Uncategorized &#8211; FormPrism</title>
	<atom:link href="https://soj.myds.me/category/uncategorized/feed/?simply_static_page=3209" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Add forms to your site in less than 1 minute.</description>
	<lastBuildDate>Tue, 05 Mar 2024 05:29:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2024/02/cropped-cropped-formprismlogo-32x32.png</url>
	<title>Uncategorized &#8211; FormPrism</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">230196026</site>	<item>
		<title>Contact Form vs Email: Five Reasons Why A Contact Form Is Required On Your Website</title>
		<link>/contact-form-vs-email-five-reasons-why-a-contact-form-is-required-on-your-website/</link>
					<comments>/contact-form-vs-email-five-reasons-why-a-contact-form-is-required-on-your-website/#respond</comments>
		
		<dc:creator><![CDATA[FormPrism]]></dc:creator>
		<pubDate>Tue, 05 Mar 2024 05:29:29 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/contact-form-vs-email-five-reasons-why-a-contact-form-is-required-on-your-website/</guid>

					<description><![CDATA[If you’re in the process of building a new website or developing an existing one, do not underestimate the importance of including a contact form in<span class="excerpt-hellip"> […]</span>]]></description>
										<content:encoded><![CDATA[<div itemprop="text" readability="155.0278519649">
<p>If you’re in the process of building a new website or developing an existing one, do not underestimate the importance of including a contact form in one of your landing pages. You may have even wondered why a contact form is required on your site in the first place. At first glance, having a contact form may seem inconsequential, or even unnecessary. After all, why would your website <em>need</em> a designated contact form if your contact information is already clearly listed, including your company email address, phone number and even the contact information of your employees? If a user wants to contact you, they’ll just send you an email or pick up the phone, right? No contact form required.</p>
<p>While that may be the case for some users, disregarding the importance of including a contact form on your website is considered to be bad UI and UX practice, and precludes your business from benefiting from the many marketing, SEO and online security advantages that a contact form can offer. So, let’s dive into the top five reasons why your website needs to include a contact form, so you can avoid making this common web development mistake.</p>
<h2 class="wp-block-heading"><strong>Having a Contact Form Is Required For Growing Your Mailing List</strong></h2>
<p>If you’re not a professional digital marketer, you may be surprised to learn that <a href="https://paintedrobot.com/email-marketing-the-ultimate-guide/">email marketing</a> is one of the most efficient and cost-effective marketing strategies out there. Email marketing tends to have a huge ROI compared to other tactics like social media marketing and paid ads, which often require significant financial investments, extensive A/B testing and a substantial (billable) time commitment to fine tune before seeing tangible results. With a contact form, your website has a built-in data collection system giving you access to one of the most valuable lead generation resources a marketer can get from your target audience: their email addresses.</p>
<p>Users that reach out to you through your website’s contact form give you permission to add their email to your mailing list, which can then be used for email marketing campaigns and remarketing purposes. Furthermore, users who connect with your business via your website’s contact form are likely active consumers in your target market and already considering investing in your products or services, so nurturing this prospective customer relationship is a smart way to boost your sales and generate more valuable leads. Put simply, growing your mailing list by including a contact form on your website should be considered a critical component to your sales funnel, lead generation and digital marketing strategies.</p>
<h2 class="wp-block-heading"><strong>Contact Forms Offer The Best User Experience</strong></h2>
<p>Having a contact form on your website can optimize user experience in a multitude of ways. Contact forms are an efficient way to encourage users to interact with your site, offering the most streamlined means of communication. With an integrated contact form, there is no need for users to open third-party applications or electronic mailing systems. Sometimes, these actions could be unavailable to users, especially if they are trying to contact your business from a mobile device. Third-party applications may need to be downloaded, updated or reinstalled before your prospective customer can contact you. Plus, once they’ve opened their inboxes, chances are they’ll be hit with a host of sidetracking information leading them to forget all about you and their intended inquiry.</p>
<p>According to <a href="https://gs.statcounter.com/platform-market-share/desktop-mobile/worldwide/#monthly-201202-202202" target="_blank" rel="noopener">Statcounter</a>, web traffic from mobile devices has surged in the last decade, overtaking searches and traffic from desktops and tablets with almost 58% of the global market share. So, creating the most mobile-friendly user experience possible with a contact form should be a critical consideration in your UX strategy.</p>
<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="/wp-content/uploads/2024/03/contact-form-vs-email-five-reasons-why-a-contact-form-is-required-on-your-website_65e6adc155290.png" alt="contact form required - PaintedRobot.com" class="wp-image-6891"><figcaption> Image source: Statcounter, February 2022.</figcaption></figure>
<p>In addition, the tenets of UX guidelines tell us that websites should require the least amount of clicks as possible for a streamlined customer journey and reduced bounce rates. As a rule of thumb, the less clicks required for a user to complete an action, the better. And any action requiring more than three clicks might as well be dead in the water. So, with every click, your user becomes exponentially less likely to connect with your business, causing you to lose out on that lead generation opportunity and developing that prospective customer relationship. Ensuring that your users have an accessible and reliable way to contact your business by providing a one-click contact form directly on your site is an important aspect of providing your users with the best UX possible.</p>
<h2 class="wp-block-heading"><strong>Contact Forms Enhance Your SEO Strategy</strong></h2>
<p>Google considers websites that have designated contact pages and contact forms to be more trustworthy, since they encourage more engagement and interaction with your site. As a result, websites that include contact forms tend to rank higher on SERPs, and most notably on Google, because they’re earning a higher Google Domain Trust Factor. Since Google tracks the number of page visits and the length of user interactions on your website, contact forms are a great way to encourage longer, more meaningful instances of engagement by creating more touchpoints, and in turn can increase organic traffic as your SERP ranking improves.</p>
<p>Contact pages and forms not only make your site more trustworthy, they signal to search engines that your website has more valuable content. Web design elements such as contact information, physical addresses, maps, phone numbers and contact forms are seen as offering users valuable information, thereby improving your SERP ranking in combination with other algorithm indexing factors. In fact, contact pages including contact forms are often some of the most highly ranking webpages due to their high Google Domain Trust Factors and the high value of their content.</p>
<h2 class="wp-block-heading"><strong>Contact Forms Improve The Professionalism of Your Web Design</strong></h2>
<p>In addition to all the digital marketing advantages and essential UX recommendations, a well-designed contact form gives your contact page a more professional appearance and can even enhance the brand image of your business. Contact forms signal to users that you take visitor and customer feedback seriously, lending a sense of credibility and legitimacy to your brand that may even translate into better customer loyalty. Plus, strategically placing a contact form on your website so that it’s as visible and accessible as possible for users shows that you are open to developing a more meaningful customer relationship by answering questions and receiving feedback. Regardless of industry, every brand should strive for an air of professionalism, and integrating a user-friendly contact form in your web design is a simple way to achieve just that.  </p>
<h2 class="wp-block-heading"><strong>Contact Forms Are Required for Cyber Security</strong></h2>
<p>Last but not least, contact forms act as a helpful firewall protecting your website from cyber security threats like spam messages and bots. In fact, it’s generally not a good idea to publish different company email addresses directly on your website, because an infinite amount of bots are designed to crawl the internet searching for webpages with one or more company email domains in order to add them to different spam mailing lists. So, webpages that include content that looks like “info@companyname.com” and “<a href="mailto:support@companyname.com">support@companyname.com</a>” in close proximity are an easy target.</p>
<p>So, are you convinced? There are tons of business savvy reasons why your website needs to include a contact form, ranging from high ROI marketing opportunities, lead generation tactics, better SEO strategy, heightened UX, an enhanced brand image and tighter cyber security measures. Too many web developers and business owners make the mistake of overlooking the pivotal role the humble contact form can play in their company’s growth and operations. Don’t be one of them.</p>
</p></div>
]]></content:encoded>
					
					<wfw:commentRss>/contact-form-vs-email-five-reasons-why-a-contact-form-is-required-on-your-website/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">256</post-id>	</item>
		<item>
		<title>What is a static WordPress site? Why would you want one?</title>
		<link>/what-is-a-static-wordpress-site-why-would-you-want-one/</link>
					<comments>/what-is-a-static-wordpress-site-why-would-you-want-one/#respond</comments>
		
		<dc:creator><![CDATA[FormPrism]]></dc:creator>
		<pubDate>Mon, 04 Mar 2024 10:51:59 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/what-is-a-static-wordpress-site-why-would-you-want-one/</guid>

					<description><![CDATA[Static websites? Isn’t that old-school? In the early days of the web, all websites were static. Today, turning your dynamic WordPress site into a high-performing static<span class="excerpt-hellip"> […]</span>]]></description>
										<content:encoded><![CDATA[<div readability="169.49654053131">
<aside class="single-post__aside">
</aside>
<p>Static websites? Isn’t that old-school? In the early days of the web, <em>all </em>websites were static. Today, turning your dynamic WordPress site into a high-performing static one might be a viable option for you. Visitors get a super-fast browsing experience, while content managers continue to use the WordPress authoring experience and plugin ecosystem. Hackers have next to no surface area to attack, because the only public-facing resources are static pages. We asked Miriam Schwab — an expert on static WordPress sites and CEO of <a href="https://www.strattic.com/">Strattic</a> — to uncover the secret powers of static websites.</p>
<section class="aside aside--post embed" readability="35">
<h3>Who is Miriam Schwab</h3>
<p>Miriam Schwab has been working with WordPress for over 14 years, and she loves it. After founding and managing a WordPress development agency for thirteen years, she’s now the co-founder and CEO of Strattic. Strattic converts WordPress websites into static sites. Miriam heads a team of twenty, based in Israel, the US, and Germany.</p>
</section>
<h4 class="wp-block-heading" id="h-why-would-you-want-to-turn-a-dynamic-site-built-with-wordpress-into-a-static-one">Why would you want to turn a dynamic site built with WordPress into a static one?</h4>
<p>When I started building websites in the early 2000s, they were very much static. That’s why I often describe the shift to static websites as coming full circle.</p>
<p>A static website has several significant advantages:</p>
<ol>
<li><strong>Speed</strong>. Static sites are generally faster because every page is prerendered – with no underlying processing server, no database queries, and no PHP processing, the pages can be quickly served to the user. Another way they’re faster is that every page can be served up through a CDN. In your standard dynamic site, only the static assets like images, CSS, and JS can be CDNed. The actual HTML pages, however, cannot because they are virtual.</li>
<li><strong>Security</strong>. Your standard dynamic website has a big attack surface. Every layer from the Apache server to the MySQL to every plugin installed on the site are potentially vulnerable. It’s hard to make sure all the holes are plugged, all the time. With a static site, there’s barely anything to breach.</li>
<li><strong>Scalability</strong>. Supporting a high-traffic site is costly and can be complicated. And even when you do that successfully, a spike in traffic can seriously slow down a site and cause issues. Static sites scale effortlessly. One of our customers got in the press and their traffic increased ten-fold, and we didn’t feel it at all! The site scaled, and not only that – got faster. That’s the weird thing about CDNs – sites get faster the more traffic they get.</li>
<li><strong>Less management and maintenance</strong>. With a dynamic site, there’s a need for regular maintenance, like upgrades, security tweaks, speed optimizations, etc. Not so on a statically generated site (this comes back to the above points).</li>
</ol>
<p>I repeatedly hear from people who have gone the full static route (also known as Jamstack) that they end up spending a lot of time coding to manage the content on their sites. Also, the stack for non-WordPress static sites is very diverse and constantly changing. Every static site needs a CMS, static site generator, storage, CDN, and even version control. And for each of those layers, tens if not hundreds of solutions exist. With WordPress, you get most of that in one system. You need to take care of the static layer separately. For this, you can use a plugin, or an end-to-end platform like Strattic.</p>
<h4 class="wp-block-heading" id="h-surely-there-are-disadvantages">Surely there are disadvantages?</h4>
<p>The disadvantages are that some types of functionality won’t work out of the box on static sites. You need to put in some work to make it static-compatible. Sometimes it’s simple to make a site static-ready, but sometimes it’s quite complicated. </p>
<p>Also, it’s a new paradigm and requires a bit of a mind-shift in terms of how you manage your site. If you use your own static publishing plugin, you need to configure the whole environment from the WordPress hosting to the static storage to the CDN. You have to make sure it catches every page, redirect, image, et cetera without crashing the server.</p>
<p>On Strattic, we automatically replace a lot of traditionally dynamic functionality with static-friendly solutions. For example, if you have search on your site, we replace it with Algolia-powered search without you having to do anything and we support WP form plugins like Gravity Forms and CF7 out of the box. However, our different approach to security means that you need to enter additional credentials to access your site.</p>
<p>Also, publishing your changes to your live static site involves an additional step: first, you publish your content on the WordPress site, and then you publish it to the static site, which can take a few minutes to go live. It’s just one additional button, but it’s a different flow.</p>
<h4 class="wp-block-heading" id="h-and-the-potential-benefits-in-terms-of-seo">And the potential benefits in terms of SEO?</h4>
<p>There are potential SEO benefits from running a static site since they tend to load faster. This, of course, can lower bounce rates and improve conversion rates. In addition, they are extremely difficult to hack. Sites don’t risk being delisted from Google’s search index for malware and the like. </p>
<p>In general, running an SEO-friendly static website is the same as a regular WP site. So, make sure you have good content, titles, meta tags, links, etc. Ideally, a statically generated site can also optimize using an amazing tool like <a href="https://yoast.com/wordpress/plugins/seo/">Yoast SEO</a>. </p>
<p>At Strattic, we love Yoast SEO very much. So much so, that we made it one of our first priorities to support it completely: all metadata, Open Graph tags, etc. publish perfectly to the static site. In addition, we publish Yoast’s XML sitemap, robots.txt, and even support 301 redirects created using Yoast. Of course, we also support redirects generated with the Redirection and Safe Redirect Manager plugins.</p>
<h4 class="wp-block-heading" id="h-how-fast-does-a-static-site-get-and-what-else-do-you-need-to-get-the-most-out-of-it">How fast does a static site get and what else do you need to get the most out of it?</h4>
<p>The speed improvements depend on how you built the site, and where you are hosting it. We have seen speed increases of up to 20 times faster, but running accurate speed tests is challenging. Sometimes, the numbers don’t reflect a huge speed increase but the site feels way faster for users. After visiting one page on a site, every subsequent visit feels nearly instant. </p>
<p>Also, all pages on a statically generated site can be served up completely via a CDN, including the HTML pages. The content pages on a standard WP site don’t actually exist as standalone files: they are virtual pages that are generated upon demand. So, in that case, the files that can be served via a CDN are only the static files like images, video, JS and CSS. A user accessing a content page depends on it reaching them from the physical location of the WP server, which in many cases can be pretty far. This could be a visitor in the UK trying to view a site hosted in Texas. All of the pages in a static site exist as standalone files, including the content pages. The system prerenders these as HTML files, so it can served them via a CDN, also making them faster for people around the globe.</p>
<h4 class="wp-block-heading" id="h-as-you-said-security-is-another-major-advantage-of-running-a-static-wordpress-site-right">As you said, security is another major advantage of running a static WordPress site, right?</h4>
<p>Yep, exactly, security is definitely a major advantage of static sites. Your standard WP site runs on a LAMP server. Every layer of that server has potential vulnerabilities, from the operating system to the MySQL to the PHP. Then on top of that, you’ve got the WordPress site which is running many plugins. All these plugins could need a security update at any time. Every minute it takes for you to update the site opens a window of opportunity for the armies of hacker bots scouring the web looking for these known weaknesses.</p>
<p>A static site is essentially just a collection of files. There’s no processing or querying going on, so there’s basically not much to hack. On Strattic, we decouple the original WP site from the public-facing site. Then, we store it in a container that shuts down when not in use, and is only accessible to Strattic-authenticated users. As a result, owners of statically generated sites can sleep better at night <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h4 class="wp-block-heading" id="h-let-s-say-you-have-a-good-use-case-for-building-a-static-site-with-wordpress-where-do-you-start">Let’s say you have a good use case for building a static site with WordPress, where do you start? </h4>
<p>Users have a few options of how they can build a static site with WordPress:</p>
<ol>
<li>You can build a <a href="https://yoast.com/what-is-a-headless-cms/">headless WordPress website</a>. That means the WP admin is used purely for content management and not for the frontend. The frontend gets the content from the WP Rest API or WPGraphQL. This is a pretty complicated way of building a site since you would need to build a frontend that ties into the content management. Then, you have to keep creating new connections as the site develops. It also makes using Gutenberg blocks, or Elementor, or almost any plugins that impact the way your site looks more difficult and sometimes impossible. </li>
<li>You can build your site in WordPress as usual (themes, plugins, and all) and then use a platform that specializes in generating a static version of your site. Like Strattic, for instance. We take care of the entire environment, and support important WP functionality that might otherwise be complicated to get working on a static site. Some examples are Yoast SEO, search (we replace native WP search with high-quality Algolia powered search, out of the box, for all our users), WPML, Polylang, 301 redirects, password-protected pages, scheduled posts, Gravity Forms, Contact Form 7, CoSchedule, and more. </li>
</ol>
<h4 class="wp-block-heading" id="h-to-recap-what-are-your-5-top-tips-for-people-who-want-to-launch-a-static-wordpress-site">To recap, what are your 5 top tips for people who want to launch a static WordPress site?</h4>
<ol>
<li>Familiarize yourself with what “static” means, and what its benefits are. There’s tons of content out there on this subject. Another popular term used for describing this approach to website development is “Jamstack”. It’s meant to be positioned relative to the LAMP stack, which is considered older and legacy. “Jam” stands for Javascript, APIs and Markup.</li>
<li>Research the available options for hosting and publishing static WP sites and see what works best for you.</li>
<li>Make sure you are using static-friendly tools. For example, third-party form systems like TypeForm, Marketo, Wufoo, Hubspot, MailChimp etc. that feed form submissions directly to them are great. If you are using Strattic, you can also use Gravity Forms or CF7 – WordPress form plugins that don’t work on static out of the box, but we support them on Strattic. You can see many examples of tools you can use to replace traditionally “dynamic” functionality in our <a href="https://www.strattic.com/static-tools/">Static Tools Directory</a>.</li>
<li>Test your static site thoroughly before launching it. Strattic offers a free trial and you can migrate a copy of your site over and publish it to static, prior to connecting your website domain. Also, all Strattic users get a static Preview site in addition to the static production site. Even once you connect your domain, you can always test your WP site first in the Preview static environment to make sure everything looks ok before deploying changes to your live site for all to see.</li>
<li>Celebrate being part of an exciting trend that helps ensure WordPress’ future for all! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f389.png" alt="🎉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></li>
</ol>
<div class="post__author" readability="29.569620253165">
<div readability="8.3164556962025">
<span class="author__name"><br />
<a href="https://yoast.com/about-us/team/edwin-toonen/"><br />
Edwin Toonen </a><br />
</span></p>
<p>Edwin is a strategic content specialist. Before joining Yoast, he spent years honing his skill at The Netherlands’ leading web design magazine.</p>
</div>
<p><img src="/wp-content/uploads/2024/03/what-is-a-static-wordpress-site-why-would-you-want-one_65e5a7d0f4006.png" width="75" height="85" alt="Avatar of Edwin Toonen" loading="lazy" decoding="async" fetchpriorty="low"> </div>
</div>
]]></content:encoded>
					
					<wfw:commentRss>/what-is-a-static-wordpress-site-why-would-you-want-one/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">204</post-id>	</item>
		<item>
		<title>What Is a Static Site?</title>
		<link>/what-is-a-static-site/</link>
					<comments>/what-is-a-static-site/#respond</comments>
		
		<dc:creator><![CDATA[FormPrism]]></dc:creator>
		<pubDate>Sun, 03 Mar 2024 08:12:31 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/what-is-a-static-site/</guid>

					<description><![CDATA[Web development has gone through many phases of evolution in the last decade alone. From interactive web applications to full-featured frameworks like Angular and React, there<span class="excerpt-hellip"> […]</span>]]></description>
										<content:encoded><![CDATA[<div readability="289.24984706808">
<p><span>Web development has gone through many phases of evolution in the last decade alone. From interactive web applications to full-featured frameworks like <strong><a href="https://buttercms.com/blog/angular-vs-react/" rel="follow">Angular and React</a></strong>, there has been a constant shift in how we think about building websites.</span></p>
<p><span>However, among all the different options available to us, one mode of development has stayed evergreen &#8211; and that is </span><b>static sites</b><span>.</span></p>
<h2 id="what-is-a-static-site"><span>What is a static site?</span></h2>
<p><span>A static website is one where each web page within the site contains its own dedicated <strong><a href="https://buttercms.com/blog/how-to-add-a-cms-to-an-html-website/" rel="follow">HTML page</a></strong> and associated assets like scripts and stylesheets.</span></p>
<p><span>When you request a page from a static site on your browser, the browser talks to the </span><b>hosting server</b><span> which then responds by providing the HTML page content, along with its stylesheet and script files.</span></p>
<p><span><img decoding="async" loading="lazy" src="https://cdn.buttercms.com/Mlmo9zSIQ9qyLTWlm7WV" alt="Diagram: Static site browser experience" width="800" height="351"></span><span></span></p>
<p><span>You can think of the hosting server as another computer that is located somewhere else on the internet, and whose main purpose is to deliver a website&#8217;s pages and assets to everyone requesting it.</span></p>
<p><span>Your browser combines the information in these assets and renders this content into the webpage that you see in front of you.</span></p>
<p><span>However, there are some issues when using this model. Each page is an independent entity, so even if the header, footer, and styling of two or more pages look the same, they are actually contained in their own HTML documents. This can lead to a lot of repetition and gets hard to manage when you have many pages on your website.</span></p>
<p><span>For example, if you want to change some text in the footer, you&#8217;ll have to make the change in the HTML document for all the pages containing that footer.</span></p>
<p><span>Fortunately, we can solve this problem by using a </span><b>static site generator</b><span>.</span></p>
<h3><span>Static site generators</span></h3>
<p><span>A static site generator is a framework that combines human-friendly pieces of data (like text files, markdown files, and HTML templates) to generate a completely static website. Static site generators work by using common templates for each page.</span></p>
<p><span>When creating a new page, we only have to specify the template and write the content, and the generator will combine them to render the HTML content of the final page.</span></p>
<p><img decoding="async" loading="lazy" src="https://cdn.buttercms.com/cR2ZuBrqSoiyYYiOJLPQ" alt="Diagram: How a static site generator creates a new page"></p>
<p><span>This way, we still have an independent document for each page in our static site, but changes and additions to common parts of each page can be managed easily.</span></p>
<p><span>For example, by using static site generation, we could have a common template that would contain the code for the header and footer. The page would then be rendered by combining each piece of content with these templates. Now when we want to change some text in the footer, we have to make the change in the template, and it will automatically apply to all rendered pages.</span></p>
<h3><span>Static sites vs single-page applications</span></h3>
<p><span>One of the most popular models for developing applications on the web is the </span><b>single-page application</b><span> or SPA.</span></p>
<p><span>Contrary to its name, a single-page application still appears to have multiple pages to the user, but under the hood contains just a single HTML document.</span></p>
<p><span>This works because once the document is loaded, it actually contains data for all pages on the site, and uses javascript to selectively render only a certain portion of that data to give the appearance of one web page.</span></p>
<p><span><img decoding="async" loading="lazy" src="https://cdn.buttercms.com/9Um1hSxxQJOcH6y2E2ds" alt="Diagram: Single-page app browser experience" width="802" height="415"></span><span></span></p>
<p><span>This approach, of course, comes with some trade-offs.</span></p>
<p><span>The benefit is that navigating between pages is much faster since we don&#8217;t have to load the assets for the next page once the initial page load is done.</span></p>
<p><span>However, the initial page load can take a lot of time depending on how large your application is.</span></p>
<h2 id="benefits-of-static-site"><span>Benefits of a static site</span></h2>
<p><span>Static sites have been around since web browsers existed, and are the natural choice when building simple web pages. Let&#8217;s look at some of the benefits of using static sites to build your website:</span></p>
<h3><span>Speed and performance</span></h3>
<p><span>Static sites give the user the bare minimum assets required to render the web page. This helps improve speed and performance in two ways:</span></p>
<ol>
<li aria-level="1"><b>Page load:</b><span> Since the browser only needs to download the assets required for the requested webpage, the time taken to download them would be less compared to other approaches.</span></li>
<li aria-level="1"><b>Page render:</b><span> The content of the webpage is contained in the HTML document itself, so it can be rendered as soon as it is downloaded, and no additional scripts processing is required.</span></li>
</ol>
<p><span>We can further improve our static site speed by using common optimization techniques like HTTP preconnects and image lazy loading.</span></p>
<h3><span>Flexibility</span></h3>
<p><span>Since static sites are the core modes of web development, they are supported across browsers and platforms.</span></p>
<p><span>This gives us a lot of flexibility since we can be confident that whatever hosting provider or CMS framework we choose, our website will be given first-class support.</span></p>
<p><span>We even have flexibility when choosing the framework used to build the website and migrate easily between static site generator frameworks, since we can always use the generated static site as a reference.</span></p>
<h3><span>Scalability</span></h3>
<p><span>Using static sites allows us to modify our content without much impact on the rest of your website since each piece of content sits on its own page.</span></p>
<p><span>Since static sites are independent of the server framework, we can deploy our site on any available hosting provider, most of which provide out-of-the-box support for supporting incremental user traffic when required. To scale your website with traffic, providers can simply add more edge servers with replicated website assets on each server without any inter-region dependencies. Providers like </span><strong><a href="https://www.netlify.com/" rel="follow noopener" target="_blank">Netlify</a></strong><span> and </span><strong><a href="https://cloudflare.com/" rel="follow noopener" target="_blank">Cloudflare</a></strong><span> already do this out of the box.</span></p>
<h3><span>Security</span></h3>
<p><span>With static sites, there is much less scope for attack vectors compared to other types of websites.</span></p>
<p><span>Since the content is fixed within the HTML document, the server returns the same response irrespective of the request parameters. This makes it harder to find security vulnerabilities since there are no potential code injection sites. For example, many common exploits take place either on forms or dynamically rendered content within a website, since these are the areas where the webpage is likely to interface with the server.</span></p>
<p><span>Additionally, since there is no dynamic content, exploits like <strong><a href="https://owasp.org/www-community/attacks/xss/" rel="follow noopener" target="_blank">cross-site scripting (XSS)</a></strong> are virtually non-existent.</span></p>
<h3><span>Crawlability</span></h3>
<p><span>Static sites fare better when it comes to search engines because all the content is contained in the initial document. This means that search engines don&#8217;t need to dynamically generate any additional content to get the complete picture of the content that we&#8217;re trying to present.</span></p>
<p><span>Although some search engines have claimed that they can crawl dynamically generated pages as well, this is not the case across the board. For example, many open source implementations (for example, </span><strong><a href="https://scrapy.org/" rel="follow noopener" target="_blank">Scrapy</a></strong><span> and </span><strong><a href="https://github.com/gocolly/colly" rel="follow noopener" target="_blank">Colly</a></strong><span>) do not include a Javascript execution environment and so cannot render dynamically generated pages.  and In the end,  it&#8217;s always better to take an approach that is compatible with all search engine crawlers.</span></p>
<h2 id="how-to-build-your-static-site"><span>How to build your static site?</span></h2>
<p><span>The most popular way to build static sites for the modern web is by using </span><b>static site generators</b><span>, or SSGs. These are tools that make it easier for developers to create static sites from reusable components.</span></p>
<p><span>Let&#8217;s look at the steps required for getting a new website set up from scratch using static site generation.</span></p>
<h3><span>Choose your framework</span></h3>
<p><span>There are numerous popular static site generators like </span><strong><a href="https://gohugo.io/" rel="follow noopener" target="_blank">Hugo</a></strong><span>, </span><strong><a href="https://nextjs.org/" rel="follow noopener" target="_blank">Next.js</a></strong><span>, and </span><strong><a href="https://gatsbyjs.com/" rel="follow noopener" target="_blank">Gatsby</a></strong><span> that provide different levels of flexibility and functionality out of the box.</span></p>
<p><span>For example, frameworks like <a href="https://buttercms.com/gatsbyjs-cms/" rel="follow">Gatsby</a> and <a href="https://buttercms.com/nextjs-cms/" rel="follow">Next.js</a> require some proficiency in the <a href="https://buttercms.com/react-cms/" rel="follow">React</a> framework before you can get up and running, but provide much more customizability out of the box. Others, like <strong><a href="https://buttercms.com/hugo-cms/" rel="follow">Hugo</a></strong> or </span><strong><a href="https://www.11ty.dev/docs/" rel="follow noopener" target="_blank">11ty</a></strong><span> are easier to set up, but don&#8217;t have as many features.</span></p>
<p><span>When choosing a framework, you should look at your proficiency in web development and the complexity of your website.</span></p>
<h3><span>Creating templates and common assets</span></h3>
<p><span>No matter the framework choice, you&#8217;ll need to create some templates for the common parts of your website like the header, footer, and nav bar.</span></p>
<p><span>Additionally, you&#8217;ll need to create the assets that will be used across the website like stylesheets, logos, and icons.</span></p>
<h3><span>Writing content</span></h3>
<p><span>In most SSG frameworks, the actual content is written in a more human-readable format, like markdown or latex. This allows non-technical authors to write content as well, in a widely adopted format.</span></p>
<p><span>The SSG framework then creates the final HTML document by compiling the content to HTML and combining it with the templates defined earlier.</span></p>
<h3><span>Deploying your static website</span></h3>
<p><span>Once we&#8217;ve completed the previous steps, we can start preparing to deploy the site publicly.</span></p>
<p><span>First, we should validate the look and feel of the site by running the site locally (on our own computer or device). Most SSG frameworks come with a developer preview functionality, where you can view the final version of the site on your own device.</span></p>
<p><span>Once we&#8217;re satisfied with our website, we can deploy it using providers like </span><span>Netlify</span><span>, or </span><strong><a href="https://pages.github.com/" rel="follow noopener" target="_blank">Github pages</a></strong><span>. Depending on the framework you use, the provider may support deployment out of the box, without any additional steps (like </span><strong><a href="https://jekyllrb.com/" rel="follow noopener" target="_blank">Jekyll</a></strong><span> and Github pages).</span></p>
<h2 id="why-use-a-headless-cms"><span>Why use a headless CMS?</span></h2>
<p><span>Despite all the advances made to make web development tooling more accessible, some technical expertise is still needed to build and deploy the site. Normally, this would mean that publishing content for a website like this would be impossible for non-developers.</span></p>
<p><span>Headless CMS tools like </span><strong><a href="https://buttercms.com/" rel="follow">ButterCMS</a></strong><span> help bridge this gap. Using a <strong><a href="https://buttercms.com/blog/what-is-headless-cms/" rel="follow">headless CMS</a></strong>, we can develop an interface with any SSG tool (like the ones listed above), after which content updates can be managed and deployed by anyone (and not just web engineers).</span></p>
<p><img decoding="async" loading="lazy" src="https://cdn.buttercms.com/NVj2niPRZOFvnHRmxmZg" alt="Diagram: HeadlessCMS and static site generator working together" width="807" height="356"></p>
<p><span>Headless content management systems and static site-generating tools are the perfect match since you can get the best of both worlds: the site-generating tools make it easier for designers and engineers to write code once and apply the same theme to multiple web pages, while headless CMSs help non-developers manage and update content on the website directly.</span></p>
<p><span>We can even use APIs provided by headless CMSs to integrate with different marketing tools. For example, we can add a webhook on our website&#8217;s application server so that every time new content is added, we can additionally send a marketing email using any popular email provider to our subscribers. This ability to listen to and act upon changes and updates in website content serves as a huge value-add when dealing with content marketing workflows.</span></p>
<p><span>In the case of ButterCMS, we can integrate with websites deployed using a site generator and use the ButterCMS dashboard to add more content or manage existing content. Here’s a more technical guide on </span><strong><a href="https://buttercms.com/blog/next-js-cms-tutorial/" rel="follow">how to integrate headless CMS with Next.js</a></strong><span> (which is a popular hybrid static site generator). For more guides on how to integrate ButterCMS with your application, please view our </span><strong><a href="https://buttercms.com/docs/" rel="follow">documentation page</a></strong><span>.</span></p>
<h2 id="final-thoughts"><span>Final thoughts</span></h2>
<p><span>In this post, we learned what a static site is, and how to create and deploy a new website using static site generator tools.</span></p>
<p><span>A key takeaway from this post would be to understand why static sites are still useful, despite the barrage of new web application frameworks taking center stage. In the end, if all you want to do is show useful content for your users, a static site may be all you need.</span></p>
<p><span>For websites, less is generally better &#8211; better for site performance, SEO, and user experience.</span></p>
<div class="e_subscription_box" readability="7">
<p>Make sure you receive the freshest Butter product updates.</p>
</div></div>
]]></content:encoded>
					
					<wfw:commentRss>/what-is-a-static-site/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">188</post-id>	</item>
	</channel>
</rss>
